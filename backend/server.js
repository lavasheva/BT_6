const WebSocket = require('ws'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket
const { ApolloServer, gql } = require('apollo-server-express');
const express = require('express');
const fs = require('fs');
require('dotenv').config(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º dotenv 
const path = require('path');
const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');
const bodyParser = require('body-parser');
const PORT = 3000;
let users = []; // –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ 


const app = express();
app.use(cors({ 
  origin: 'http://localhost:5173', // –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥) 
  methods: ['GET', 'POST', 'PUT', 'DELETE'], 
  allowedHeaders: ['Content-Type', 'Authorization'], 
  credentials: true // –í–∞–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫—É–∫–∏ 
})); 
app.use(express.json());
app.use(bodyParser.json());


const session = require('express-session');
const cookieParser = require('cookie-parser');
const bcrypt = require('bcrypt');

// –ö—É–∫–∏
app.use(cookieParser());

// –°–µ—Å—Å–∏–∏
app.use(session({
    secret: 'my_secret_session_key', // –ú–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ .env
    resave: false,
    saveUninitialized: false,
    cookie: {
        httpOnly: true,       // –ë–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ JS
        sameSite: 'lax',      // –ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç CSRF
        maxAge: 60 * 60 * 1000 // 1 —á–∞—Å
    }
}));


// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.get('/profile', requireAuth, (req, res) => {
  res.json({ 
      user: req.session.user 
  });
});

// –í—ã—Ö–æ–¥ (—É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏)
app.post('/logout', (req, res) => {
  req.session.destroy(err => {
      if (err) {
          return res.status(500).json({ 
              message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' 
          });
      }
      
      res.clearCookie('connect.sid'); // –£–¥–∞–ª—è–µ–º cookie —Å–µ—Å—Å–∏–∏
      res.json({ 
          message: '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' 
      });
  });
});


// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã GraphQL
const typeDefs = gql`
  type Product {
    id: ID!
    name: String!
    price: Float!
    description: String
    categories: [String]
  }

  type Query {
    products: [Product]
    product(id: ID!): Product
  }
`;






// –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ products.json
let products = [];
function loadProducts() {
    try {
        const filePath = path.join(__dirname, 'products.json');
        const data = fs.readFileSync(filePath, 'utf-8');
        const jsonData = JSON.parse(data);
        return jsonData.products; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ products
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ products.json:', err);
        return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

function saveProducts() {
    try {
        const filePath = path.join(__dirname, 'products.json');
        const dataToSave = { products }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "products"
        fs.writeFileSync(filePath, JSON.stringify(dataToSave, null, 2));
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ products.json:', err);
    }
}


// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ 
function requireAuth(req, res, next) { 
  if (!req.session.user) { 
  return res.status(401).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' }); 
  } 
  next(); 
} 

app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username);

  if (!user) {
      return res.status(401).json({ 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
  }

  const passwordMatch = await bcrypt.compare(password, user.password);

  if (!passwordMatch) {
      return res.status(401).json({ 
          message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
      });
  }

  // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
  req.session.user = {
      id: user.id,
      username: user.username
  };

  res.json({ 
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' 
  });
});


const resolvers = {
    Query: {
        products: () => loadProducts(),
        product: (_, { id }) => loadProducts().find(p => p.id == id),
    }
};


// –°–æ–∑–¥–∞—ë–º GraphQL-—Å–µ—Ä–≤–µ—Ä
const server = new ApolloServer({ typeDefs, resolvers });

async function startServer() {
    await server.start();
    server.applyMiddleware({ app });

    // Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
const swaggerOptions = {
    swaggerDefinition: {
        openapi: '3.0.0',
        info: {
            title: 'Product Management API',
            version: '1.0.0',
            description: 'API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏',
        },
        servers: [
            {
                url: 'http://localhost:3000',
            },
        ],
    },
    apis: ['openapi.yaml'], // —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
};
    const swaggerDocs = swaggerJsDoc(swaggerOptions);
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));
    app.listen(PORT, () => {
        console.log(`GraphQL API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}/graphql`);
        console.log(`Swagger API Docs: http://localhost:${PORT}/api-docs`);
    });

    const wss = new WebSocket.Server({ port: 8080 }); // WebSocket-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080

    wss.on('connection', (ws) => {
        console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É');

        ws.on('message', (message) => {
            console.log('üì© –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message.toString());
        
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
            wss.clients.forEach(client => {
                if (client !== ws && client.readyState === WebSocket.OPEN) {
                    client.send(JSON.stringify({ text: message.toString() })); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
                }
            });
        });
        

        ws.on('close', () => {
            console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
        });
    });

    console.log('WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8080');

}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
app.get('/products', (req, res) => {
    res.json(loadProducts());
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
app.post('/products', (req, res) => {
    const { name, price, description, categories } = req.body;
    if (!name || !price || !description || !categories) {
        return res.status(400).json({ message: 'Name, price, description, and categories are required' });
    }
    const newProduct = {
        id: Date.now(), // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
        name,
        price,
        description,
        categories
    };
    products.push(newProduct);
    saveProducts();
    res.status(201).json(newProduct);
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.get('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = loadProducts().find(p => p.id === productId);
    if (product) {
        res.json(product);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.put('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const product = loadProducts().find(p => p.id === productId);
    if (product) {
        const { name, price, description, categories } = req.body;
        product.name = name !== undefined ? name : product.name;
        product.price = price !== undefined ? price : product.price;
        product.description = description !== undefined ? description : product.description;
        product.categories = categories !== undefined ? categories : product.categories;
        saveProducts();
        res.json(product);
    } else {
        res.status(404).json({ message: 'Product not found' });
    }
});

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
app.delete('/products/:id', (req, res) => {
    const productId = parseInt(req.params.id);
    const initialLength = products.length;
    products = products.filter(p => p.id !== productId);
    if (products.length === initialLength) {
        return res.status(404).json({ message: 'Product not found' });
    }
    saveProducts();
    res.status(204).send();
});


app.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const existingUser = users.find(user => user.username === username);
  
  if (existingUser) {
      return res.status(400).json({ 
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
      });
  }
  
  try {
      const hashedPassword = await bcrypt.hash(password, 10); // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const newUser = {
          id: users.length + 1,
          username,
          password: hashedPassword
      };
      
      users.push(newUser);
      res.status(201).json({ 
          message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' 
      });
  } catch (err) {
      res.status(500).json({ 
          message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 
          error: err.message 
      });
  }
});


const cachePath = path.join(__dirname, 'cache.json');

app.get('/data', requireAuth, (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫—ç—à
        if (fs.existsSync(cachePath)) {
            const stats = fs.statSync(cachePath);
            const now = new Date();
            const modified = new Date(stats.mtime);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ç–∞—Ä—à–µ –ª–∏ —Ñ–∞–π–ª 1 –º–∏–Ω—É—Ç—ã
            const isFresh = (now - modified) < 60 * 1000;
            
            if (isFresh) {
                const cachedData = fs.readFileSync(cachePath, 'utf8');
                return res.json({ 
                    source: 'cache', 
                    data: JSON.parse(cachedData) 
                });
            }
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        const freshData = {
            timestamp: new Date().toISOString(),
            message: '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞',
            user: req.session.user
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        fs.writeFileSync(cachePath, JSON.stringify(freshData, null, 2));
        
        // –û—Ç–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—É
        res.json({ 
            source: 'generated', 
            data: freshData 
        });
    } catch (error) {
        res.status(500).json({ 
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 
            error: error.message 
        });
    }
});


startServer(); // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
